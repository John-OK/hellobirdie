# Django Project Initialization

This guide walks through initializing the Django project for HelloBirdie with a split settings structure, following Test-Driven Development (TDD) principles.

## 1. Create Django Project

First, make sure your virtual environment is activated:

```bash
# Navigate to project root
cd /home/john/Projects/hellobirdie

# Activate virtual environment
source .venv/bin/activate

# Navigate to backend directory
cd backend
```

Now, create the Django project:

```bash
# Create Django project
django-admin startproject hellobirdie .
```

This will create:

- `hellobirdie/` - Project package directory
- `hellobirdie/settings.py` - Default settings file
- `hellobirdie/urls.py` - URL configuration
- `hellobirdie/asgi.py` - ASGI configuration
- `hellobirdie/wsgi.py` - WSGI configuration
- `manage.py` - Command-line utility

## 2. Create Split Settings Structure

Now we'll reorganize the settings to follow the split settings pattern:

```bash
# Create settings directory
mkdir -p hellobirdie/settings

# Create settings files
touch hellobirdie/settings/__init__.py
touch hellobirdie/settings/base.py
touch hellobirdie/settings/local.py
touch hellobirdie/settings/test.py
```

## 3. Configure Settings Files

### 3.1 Move Default Settings to Base

First, let's move the contents of the default `settings.py` to `base.py`:

```bash
# Move settings.py content to base.py
cat hellobirdie/settings.py > hellobirdie/settings/base.py
```

### 3.2 Configure `__init__.py`

The `__init__.py` file should be empty or contain a simple import statement. This allows Django to find the settings module.

### 3.3 Configure `base.py`

Edit `base.py` to contain settings common to all environments:

```python
"""
Base settings for HelloBirdie project.
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hellobirdie.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hellobirdie.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'hellobirdie'),
        'USER': os.environ.get('DB_USER', 'hellobirdie_user'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'hellobirdie_password'),
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', '5432'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}
```

### 3.4 Configure `local.py`

Edit `local.py` for development-specific settings:

```python
"""
Local development settings for HelloBirdie project.
"""
import os
from dotenv import load_dotenv
from .base import *

# Load environment variables from .env file
load_dotenv(os.path.join(BASE_DIR, '.env'))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Database
# Use the LOCAL_DATABASE_URL for local development
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'hellobirdie'),
        'USER': os.environ.get('DB_USER', 'hellobirdie_user'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'hellobirdie_password'),
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', '5432'),
    }
}

# Add Django Debug Toolbar for development
INSTALLED_APPS += [
    'debug_toolbar',
]

MIDDLEWARE = ['debug_toolbar.middleware.DebugToolbarMiddleware'] + MIDDLEWARE

# Django Debug Toolbar settings
INTERNAL_IPS = [
    '127.0.0.1',
]

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}
```

### 3.5 Configure `test.py`

Edit `test.py` for test-specific settings:

```python
"""
Test settings for HelloBirdie project.
"""
from .base import *

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-test-key-not-used-in-production'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['testserver']

# Use a faster password hasher for testing
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.MD5PasswordHasher',
]

# Use the same PostgreSQL database but with a test_ prefix
# Django will automatically add a test_ prefix to the database name
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'hellobirdie'),
        'USER': os.environ.get('DB_USER', 'hellobirdie_user'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'hellobirdie_password'),
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', '5432'),
        'TEST': {
            'NAME': 'test_hellobirdie',
        },
    }
}

# Disable unnecessary middleware for faster tests
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
]
```

## 4. Update `.env` File

Make sure your `.env` file has all the necessary variables:

```
DJANGO_SETTINGS_MODULE=hellobirdie.settings.local
DATABASE_URL=postgres://postgres:postgres@db:5432/hellobirdie
SECRET_KEY=your_secret_key_here
DEBUG=True

# For local development
LOCAL_DATABASE_URL=postgres://hellobirdie_user:hellobirdie_password@localhost:5432/hellobirdie
DB_NAME=hellobirdie
DB_USER=hellobirdie_user
DB_PASSWORD=hellobirdie_password
DB_HOST=localhost
DB_PORT=5432
```

## 5. Update `wsgi.py` and `asgi.py`

Update the WSGI and ASGI configuration files to use the new settings path:

### 5.1 Update `wsgi.py`

```python
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hellobirdie.settings.base')

application = get_wsgi_application()
```

### 5.2 Update `asgi.py`

```python
import os
from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hellobirdie.settings.base')

application = get_asgi_application()
```

## 6. Delete the Original `settings.py`

Once you've confirmed that the split settings are working, you can remove the original settings file:

```bash
rm hellobirdie/settings.py
```

## 7. Create API App

Create the API app that will handle our REST endpoints:

```bash
python manage.py startapp api
```

> If you get `CommandError: 'api' conflicts with the name of an existing Python module and cannot be used as an app name. Please try another name.`, you'll have to delete the `api` directory and run the command again. Django cannot create an app if a directory with the name of the app already exists.

This will create:

- `api/` - App directory
- `api/models.py` - Models
- `api/views.py` - Views
- `api/admin.py` - Admin configuration
- `api/apps.py` - App configuration
- `api/tests.py` - Tests

## 8. Write First Test (Following TDD)

Create a test directory structure:

```bash
mkdir -p api/tests
touch api/tests/__init__.py
touch api/tests/test_health.py
```

Write a health check test in `api/tests/test_health.py`:

```python
from django.test import TestCase
from django.urls import reverse

class HealthCheckTestCase(TestCase):
    def test_health_check_returns_200(self):
        """Test that the health check endpoint returns a 200 status code."""
        response = self.client.get(reverse('health-check'))
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json(), {"status": "ok"})
```

## 9. Run the Test (It Should Fail)

Run the test to verify it fails (RED phase of TDD):

```bash
python manage.py test api.tests.test_health
```

The test should fail because we haven't implemented the health check endpoint yet.

## 10. Implement Health Check View

Create the health check view in `api/views.py`:

```python
from django.http import JsonResponse

def health_check(request):
    """Simple health check endpoint."""
    return JsonResponse({"status": "ok"})
```

## 11. Configure URLs

### 11.1 Create `api/urls.py`

```python
from django.urls import path
from . import views

urlpatterns = [
    path('health/', views.health_check, name='health-check'),
]
```

### 11.2 Update `hellobirdie/urls.py`

```python
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('api.urls')),
]
```

## 12. Configure API App

Update the API app configuration:

### 12.1 Update `api/apps.py`

```python
from django.apps import AppConfig

class ApiConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'api'
```

### 12.2 Add API App to INSTALLED_APPS

Add the API app to the INSTALLED_APPS in `settings.py` (we'll refactor this into the split settings structure later):

```python
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'api',
]
```

## 13. Run the Test Again (It Should Pass)

Run the test again to verify it passes (GREEN phase of TDD):

```bash
python manage.py test api.tests.test_health
```

## 14. Run Migrations

Run migrations to set up the database:

```bash
python manage.py makemigrations
python manage.py migrate
```

## 15. Run Development Server

Start the development server:

```bash
python manage.py runserver
```

Visit http://127.0.0.1:8000/api/health/ to verify the health check endpoint works.

## 16. Verify Docker Setup (Optional)

Build and run the Docker containers:

```bash
# From project root
docker-compose build
docker-compose up -d
```

Access the health check endpoint through Docker:
http://localhost:8000/api/health/

## Common Issues and Solutions

### Issue: Import Error with dotenv

If you encounter an error with importing dotenv, make sure python-dotenv is installed:

```bash
pip install python-dotenv
```

### Issue: Database Connection Error

If you encounter database connection errors:

1. Verify PostgreSQL is running: `sudo service postgresql status`
2. Check connection parameters in `.env`
3. Verify user permissions: `sudo -u postgres psql -c "SELECT rolname, rolcreatedb FROM pg_roles WHERE rolname='hellobirdie_user';"`

### Issue: Missing Dependencies

If you encounter missing dependencies, update your requirements:

```bash
pip install -r backend/requirements/local.txt
```

## What We Did Differently This Time

1. **Split Settings Structure**: Properly organized settings into base, local, and test files
2. **Environment Variables**: Used environment variables for sensitive information
3. **TDD Approach**: Started with a test before implementing the feature
4. **Consistent Database**: Used PostgreSQL for both local and Docker environments
5. **Clear Directory Structure**: Followed Django best practices for project organization
